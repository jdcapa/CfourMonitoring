#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""
Script which monitors SCF/MP2/CCSD/CCSD(T) as well as DFT
 geometry optimisations for Cfour and Orca.
"""

import os
import sys
import time
import argparse
from moleculartoolbox import OrcaOutput
from moleculartoolbox import CfourOutput
from moleculartoolbox import Energy
from moleculartoolbox import printfunctions as PF


# parser set-up
parser = argparse.ArgumentParser(description=__doc__)

parser.add_argument('outfile',
                    metavar='Output file',
                    type=str, help='Cfour/Orca Output file')
parser.add_argument('-s', "--short",
                    action="store_true",
                    default=False,
                    dest="short_flag",
                    help='Keeps the output to a minimum [default: False].')
parser.add_argument('-b', "--basename",
                    action='store',
                    type=str, default="",
                    dest="basename",
                    help=('Provide the Orca basename if there is more than one'
                          ' calculation.'))
parser.add_argument('-o', '--opt',
                    action="store_true",
                    default=False,
                    dest="opt_write_flag",
                    help=('Writes an opt.xyz file containing the '
                          'geometry of each iteration (default: False)'))
parser.add_argument('-v', "--verbose",
                    action="store_true",
                    default=False,
                    dest="verbose_flag",
                    help='Prints extra output for debugging [default: False].')

ARGS = parser.parse_args()


def write_trajectory(geometries, energies, basename):
    """Write the geometries into an trj.xyz file."""
    trj_str = ""
    energies = energies.tolist()
    if len(energies) == len(geometries) - 1:
        energies.append(energies[-1])
    for i, geometry in enumerate(geometries):
        trj_str += geometry.xyz_file_string("E = {:.9f}".format(energies[i]))
    with open(basename + ".trj.xyz", "w") as trj:
        trj.write(trj_str)


def mon_header(job):
    """Analyse the calculation and decides what to do next."""

    type_mapping = {'Energy_Calc': "Single-point energy",
                    'Geo_Opt': "Geometry optimisation",
                    'Gradient_Calc': "Gradient calculation",
                    'Hessian_Calc': "Hessian calculation"}
    infodict = job.get_Calc_info()
    out = ""
    out += "\nCalculation type: {}".format(type_mapping[infodict["calctype"]])
    out += "\nSCF convergence crit.: {} Eh".format(infodict["scfconv"])
    if infodict["calctype"] == "Geo_Opt":
        out += "\nGeometry convergence crit.: "
        out += "{} Eh".format(infodict["geoconv"])

    out += "\nLevel of theory: {0}/{1} with {2} reference.".format(
        infodict['method'], infodict['basis'], infodict['ref'])

    out += "\nCharge: {}, Multiplicity: {}\n\n".format(infodict['charge'],
                                                       infodict['mult'])

    # Add Frozen Core analysis
    return out


def orca_or_cfour(output_file):
    """Determine the programme used."""
    max_num_read = 100
    with open(output_file) as outf:
        for i, line in enumerate(outf):
            if "O   R   C   A" in line:
                return "Orca"
            if "CFOUR" in line:
                return "Cfour"
            if i > max_num_read:
                break
    return "Unknown"


def lprint(*arg):
    """Print if ARGS.verbose_flag."""
    if ARGS.verbose_flag:
        print(*arg)


if __name__ == '__main__':
    if not os.path.exists(ARGS.outfile):
        sys.exit("Cannot find {}.".format(ARGS.outfile))
    base_dir = os.path.dirname(ARGS.outfile)
    base_dir = base_dir if base_dir else os.getcwd()

    # Determine the Quantum Chem Programme
    c4_or_orca = orca_or_cfour(ARGS.outfile)
    if c4_or_orca == "Orca":
        t0 = time.time()
        job = OrcaOutput(base_dir, ARGS.basename)
        t1 = time.time()
        lprint("Read output", "t = {}".format(t1 - t0))
    elif c4_or_orca == "Cfour":
        t0 = time.time()
        job = CfourOutput(base_dir, ARGS.outfile)
        t1 = time.time()
        lprint("Read output", "t = {}".format(t1 - t0))
    else:
        sys.exit("{} does not look like a valid output.".format(ARGS.outfile))

    # Analyse the output
    basename = job.basename
    t0 = time.time()
    geometries = job.geometries
    t1 = time.time()
    lprint("Read geometies", "t = {}".format(t1 - t0))
    t0 = time.time()
    job_energy = Energy(job)
    t1 = time.time()
    lprint("Read energies", "t = {}".format(t1 - t0))
    energies = job_energy.energies

    # Print Overview
    print(mon_header(job))
    print(PF.print_optimisation_sumary(energies, ARGS.short_flag))
    # Add Geometry analysis

    # Handle trj.xyz file
    if ARGS.opt_write_flag:
        write_trajectory(geometries, job_energy.total, basename)
