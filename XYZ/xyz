#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
"""Extracts all XYZ coordinates and provides analysis tools."""
import os
import re
import sys
import argparse
from moleculartoolbox import printfunctions as PF
from moleculartoolbox import Geometry
from moleculartoolbox import OrcaOutput


# Globals
delete_tmp = False

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('input_file', metavar='Input File', type=str,
                    help='This can be an orca input/orca output/generic xyz or'
                         'trajectory file.')
parser.add_argument('-o', '--output', action='store', dest="xyz_out_file",
                    type=str, default='',
                    help='The output file name. This file contains the (new) '
                         'geometry [Default: <sum formula>.xyz].')
parser.add_argument('-f', "--force", action="store_true", default=False,
                    dest="overwrite_flag", help='Overwrites the xyz filename. '
                    '[Default: False]')
parser.add_argument('-ib', "--ibohr", action="store_true", default=False,
                    dest="ibohr_flag", help='Reads the XYZ in bohr units. '
                    '[Default: False]')
parser.add_argument('-ob', "--obohr", action="store_true", default=False,
                    dest="obohr_flag", help='Returns XYZ in bohr units. '
                    'Default: False')
parser.add_argument('-p', '--precision', action='store', dest="precision",
                    type=int, default=9,
                    help='The precision of the output xyz geometry'
                    ' Default: 9')
parser.add_argument('-r', "--rotate", action="store_true", default=False,
                    dest="rotate_flag", help='Rotates the geometry into a '
                    'principle axis orientation [Default: False].')
parser.add_argument('-c', "--connect", action="store_true", default=False,
                    dest="connect_flag", help='Prints pymol connection map. '
                    '[Default: False].')
parser.add_argument('-ct', '--connect-tol', action='store',
                    dest="connect_tol",
                    type=float, default=1.15,
                    help='Use with -c: '
                         'A tolerance factor (>1) used to define a range in '
                         'which two atoms till count as connected '
                         '[Default: 1.15].')
parser.add_argument('-v', "--verbose", action="store_true", default=False,
                    dest="verbose_flag", help='Prints more detail')
ARGS = parser.parse_ARGS()

if __name__ == '__main__':
    # Does the input file exist?
    if not os.path.exists(ARGS.input_file):
        sys.exit("{} does not exist.".format(ARGS.input_file))

    # Type of file
    if ".xyz" in ARGS.input_file:
        # input units
        if ARGS.ibohr_flag:
            input_units = "Bohr"
        else:
            input_units = ""
        with open(ARGS.input_file) as input_xyz:
            inXYZ = input_xyz.read()
        geometry = Geometry(inXYZ.split('\n')[2:], distance_units=input_units)
    elif ".out" in ARGS.input_file:
        # Orca Output file
        if re.search("\.mpi\d+\.", ARGS.input_file):
            basename = ".".join(ARGS.input_file.split(".")[:-2])
        else:
            basename = ".".join(ARGS.input_file.split(".")[:-1])
        orca_out = OrcaOutput(os.getcwd(), basename)
        geometry = orca_out.geometry
    elif ".inp" in ARGS.input_file:
        # Orca Input file
        basename = ".".join(ARGS.input_file.split(".")[:-1])
        orca = OrcaOutput(os.getcwd(), basename, True)
        geometry = orca.geometry

    elif ".trj" in ARGS.input_file:
        # Geometry optimisation trajectory
        with open(ARGS.input_file) as input_trj:
            inTRJ = input_trj.read()
        finalXYZ = re.split("\n\d+\n", inTRJ)[-1].split("\n")[1:]
        geometry = Geometry(finalXYZ)
    else:
        sys.exit("Unknown format")

    # Output units
    if ARGS.obohr_flag:
        units = "bohr"
    else:
        units = "Angs"

    # Move and rotate geometry to its principle axis frame
    if ARGS.verbose_flag:
        print(PF.print_rigid_rotational_constants(geometry.rot_prop))
    geometry.rotate_to_principal_axes_frame()

    # Determine output file name
    if ARGS.xyz_out_file:
        new_filname = ARGS.xyz_out_file
    else:
        for i in range(10):
            if i:
                add = "_{}".format(i)
            else:
                add = ""
            new_filname = geometry.sum_formula() + add + ".xyz"
            if not os.path.exists(new_filname):
                break

    # Write XYZ file
    if (not os.path.exists(new_filname) or ARGS.overwrite_flag):
        with open(new_filname, 'w') as new_xyz:
            new_xyz.write("{}\nz2x in {}\n".format(len(geometry.atoms), units))
            for atom in geometry.atoms:
                new_xyz.write(atom.print_cartesian(ARGS.precision, units) +
                              '\n')
                if ARGS.verbose_flag:
                    print(atom.print_cartesian(ARGS.precision, units),
                          "M ", atom.mass)
    else:
        sys.exit("{} exists.".format(new_filname))

    # Print pymol connection map
    if ARGS.connect_flag:
        cn = geometry.closest_neighbours()
        for i in range(geometry.nAtoms):
            for atom in cn[i]:
                if geometry.is_bound(atom, i, ARGS.connect_tol):
                    print("bond id {}, id {}".format(i + 1, atom + 1))
